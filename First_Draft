import os
import time
import sys
from datetime import datetime

events = {}
upcoming_events = {}
dates = []



def main():
    dict_from_file()
    #display_data()
    #search_data()
    #add_book()
    check_dates()
    # book = input("Name of book please.")
    #remove_book(book)
    early_reminder()



def dict_from_file():
    with open('/home/pilot/PycharmProjects/PilotPyCharm/venv/Personal_Projects/Events') as file:
        for line in file.readlines():
            release_date, *title = line.split()
            events[str(title).lower().strip("[]").replace("'", "").replace(",", "")] = str(release_date)
        for key, value in events.items():
            dates.append(value)


#def display_data():
#    for key, value in books.items():
#        print(f"{key.title()} is due to be released {value}")


#def search_data():
#    while True:
#        book = input("What book are you searching for? Press 'q' to quit.").lower()
#        if book == 'q':
#            break
#        else:
#            for key, value in books.items():
#                if book in key:
#                    print(f"{str(key)} is due to be released {str(books[key])}")
#                else:
#                    print(f"{str(book)} is not in the database. Perhaps check the spelling. Please use full names:"
#                          f" Aoe Abercrombie rather than j abercrombie, etc.")
#                    break


def add_item(new_event, date):
    with open('/home/pilot/PycharmProjects/PilotPyCharm/venv/Personal_Projects/Events', "a") as file:
        events[new_event] = str(date)
        file.write(str(date) + " " + str(new_event) + "\n")
        #sys.stdout.flush()
        #os.fsync(file.fileno())


def remove_item(event):
    for key, value in events.items():
        if event in key:
            events.pop(key)
            rewrite_dict()
            print(str(early_reminder()))
            break


def rewrite_dict():
    with open('/home/pilot/PycharmProjects/PilotPyCharm/venv/Personal_Projects/Events', "w") as file:
        for key, value in events.items():
            file.writelines(f"{str(value)} {str(key).lower()}\n")


def check_dates():
    with open('/home/pilot/PycharmProjects/PilotPyCharm/venv/Personal_Projects/Events', "r") as file:
        flag = False
        today = time.strftime('%m-%d-%y')
        for line in file:
            if today in line:
                date, *event = line.split()
                event1 = str(event).strip('[]').replace(",", "").replace("'", "").title()
                flag = True
                os.system(f'notify-send "{str(event1)} is occurring on: {str(date)}"')
        if not flag:
            os.system('notify-send "There are no upcoming events."')


def check_early_reminder():
    with open('/home/pilot/PycharmProjects/PilotPyCharm/venv/Personal_Projects/EarlyReminder.txt', "r") as file:
        today = time.strftime('%m-%d-%y')
        for line in file:
            if today in line:
                date, *event = line.split()
                event1 = str(event).strip('[]').replace(",", "").replace("'", "")
                return f"{str(event1).title()} is in one week."


def notification():
    with open('/home/pilot/PycharmProjects/PilotPyCharm/venv/Personal_Projects/Events', "r") as file:
        today = time.strftime('%m-%d-%y')
        for line in file:
            if today in line:
                date, *event = line.split()
                event1 = str(event).strip('[]').replace(",", "").replace("'", "")
                return f"{str(event1).title()} is today."
            #else:
                #return f"No events today."


def early_reminder():
    with open("EarlyReminder.txt", "w") as file:
        for key, value in events.items():
            day_value = int(value[slice(3, 5)]) - 7
            month_value = value[slice(0, 2)]
            year_value = f"-{value[slice(6, 10)]}"
            if int(day_value) <= 0:
                month_value = int(month_value) - 1
                if month_value == 2:
                    day_value = int(day_value) + 28
                    value3 = str(value_check(month_value)) + "-" + str(day_check(day_value)) + str(year_value)
                    upcoming_events[key] = value3
                if month_check(month_value):
                    day_value = int(day_value) + 31
                    value3 = str(value_check(month_value)) + "-" + str(day_check(day_value)) + str(year_value)
                    upcoming_events[key] = value3
                if month_check2(month_value):
                    day_value = int(day_value) + 30
                    value_check(month_value)
                    value3 = str(value_check(month_value)) + str(day_check(day_value)) + str(year_value)
                    upcoming_events[key] = value3
            else:
                value3 = str(value[slice(0, 2)]) + "-" + str(day_check(day_value)) + str(year_value)
                upcoming_events[key] = value3

        for key, value in upcoming_events.items():
            file.writelines(f"{str(value)} {str(key)}\n")


def value_check(value):
    if int(value) == 12:
        value = 1
        return f"0{str(value)}"
    if int(value) < 10:
        return f"0{str(value)}"
    else:
        return str(value)


def day_check(day):
    if int(day) < 10:
        return f"0{str(day)}"
    else:
        return f"{str(day)}"


def month_check(month):
    if month == 1:
        return True
    if month == 3:
        return True
    if month == 5:
        return True
    if month == 7:
        return True
    if month == 8:
        return True
    if month == 10:
        return True
    if month == 12:
        return True
    else:
        return False


def month_check2(month):
    if month == 4:
        return True
    if month == 6:
        return True
    if month == 11:
        return True
    else:
        return False


main()
