import tkinter
from event_reminder import *

# Let's see... To begin with I'll need a frame for book releases, and inside the frame a listbox for each individual
# release.
# After that I'll need to import the methods I made in the previous version.
# Create a button that displays closest book release.
# It may be kind of challenging figuring out how to populate a listbox from a dictionary, what should I do first...?
# How about I just create the skeleton of the GUI first.

# Maybe create a GUI with several different buttons. Pressing one shows a ist of books and their release dates,
# pressing another shows a list of upcoming holidays/family events, pressing another shows a list of upcoming
# commitments for work/school etc, pressing another shows a to-do list.

# Tuesday, August 11th 2020
# For today I'll create a remove option for removing items from the list
# Next I'll configure the GUI so that it can display multiple sets of data: Book release dates, upcoming family
# events/Holidays, and professional/school commitments. I'll create a data file for each of these and create the option
# of either displaying all the data in one window or displaying the data in multiple windows
# Last for today, I'll configure the program to run automatically in the background.

# I created the remove item feature. Now I'm in the process of adding a feature that will allow the user to display
# multiple different types of data: Book releases, upcoming family and/or professional events, etc.
# To do this I'll need to fiddle with the text entry boxes because birthday's don't have authors, yet there is a
# text entry box for authors, and when it's left blank problems arise. Maybe create some kind of conditional
# statement that says something like if value="" return none or something.
# After all that just add in features that allow me to add in other life events, and maybe see if I can find a way
# to color code listbox items according to the proximity of their arrival.
# After that I'll configure the part of the program the sends notifications to run automatically on system start-up
# as well as every four hours or so. then I think I'll be just about done and can move on to building a trading bot.

# So for tomorrow:
#       1: fix text entry box problems, maybe by creating a different function/button for adding birthdays or performing
#       error handling on the author text entry box.
#       2: Create/Alter GUI features for adding in other events besides book releases: Birthdays, professional events,
#       to-do list items, etc.
#       3: Configure the notification portion of the program to run automatically and create an executable desktop
#       version of the GUI.

# Worked on the above. For tomorrow:
#   1: Configure pop-up windows for upcoming events.
#   2: Configure the program to run automatically.
#   3: Populate the program with information and then move on to the next project.


class event_radar:
    def __init__(self):
        self._main_window = tkinter.Tk()
        self._main_window.title("Schedule Radar")

        self.create_item_list()
        self.add_new_item()
        #self.add_author()
        self.create_add_btn()
        self.create_remove_button()
        self.create_exit_btn()

        self._main_window.mainloop()

    def create_item_list(self):
        self._item_frame = tkinter.Frame(self._main_window)
        self._item_frame.pack()
        self._book_listbox = tkinter.Listbox(self._item_frame, height=25, width=55)
        for key, value in events.items():
            self._book_listbox.insert(tkinter.END, key.title(), value)
        self._book_listbox.pack(side='left', padx=35, pady=40)

    def create_add_btn(self):
        self._add_btn = tkinter.Button(self._main_window, text='Add', command=self.add_to_dictionary)
        self._add_btn.pack(pady=5)

    def create_exit_btn(self):
        self._exit_btn = tkinter.Button(self._main_window, text='Exit', command=self._main_window.quit)
        self._exit_btn.pack(pady=5)

    def create_remove_button(self):
        self._remove_btn = tkinter.Button(self._main_window, text='Remove Selection', command=self.remove_item)
        self._remove_btn.pack(pady=5)

    def add_new_item(self):
        self._title_frame = tkinter.Frame(self._main_window)
        self._title_frame.pack(side='left')
        self._title_label = tkinter.Label(self._title_frame, text="Name of Event:")
        self._title_label.pack()
        self._title_entry = tkinter.Entry(self._title_frame)
        self._title_entry.pack(pady=15, padx=15)
        self._release_label = tkinter.Label(self._title_frame, text="Date of Event:")
        self._release_label.pack()
        self._release_entry = tkinter.Entry(self._title_frame)
        self._release_entry.pack(pady=15, padx=15)

    '''
    def add_author(self):
        self._author_frame = tkinter.Frame(self._main_window)
        self._author_frame.pack(side='right')
        self._author_label = tkinter.Label(self._author_frame, text="Author Name:")
        self._author_label.pack()
        self._author_entry = tkinter.Entry(self._author_frame)
        self._author_entry.pack(pady=15, padx=15)
    '''

    def add_to_dictionary(self):
        #if self._author_entry.get() != "":
        #    key = str(self._title_entry.get()) + " by " + str(self._author_entry.get())
        #    value = str(self._release_entry.get())
        #    self._book_listbox.insert(tkinter.END, key, value)
        #    add_item(key, value)
        #else:
        key = str(self._title_entry.get())
        value = str(self._release_entry.get())
        self._book_listbox.insert(tkinter.END, key, value)
        add_item(key, value)

    def remove_item(self):
        selection = self._book_listbox.get(self._book_listbox.curselection())
        remove_item(str(selection))
        self._book_listbox.delete(0, 'end')
        for key, value in events.items():
            self._book_listbox.insert(tkinter.END, key.title(), value)
